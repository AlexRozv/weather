{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","useStyles","makeStyles","theme","app","width","display","flexDirection","justifyContent","alignItems","textAlign","background","icon","height","margin","text","color","textShadow","time","fontSize","temp","marginRight","search","paper","marginTop","backgroundColor","App","useState","query","setQuery","weather","setWeather","classes","fetch","then","res","json","result","console","log","catch","e","day","Date","getDay","date","getDate","month","getMonth","getHours","getMinutes","className","Typography","main","name","description","charAt","toUpperCase","slice","CardMedia","image","Math","round","Paper","elevation","variant","TextField","autoFocus","onChange","target","value","onKeyPress","key","IconButton","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2TAYMA,EACC,mCADDA,EAEE,qDAGFC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,IAAK,CACHC,MAAO,QACPC,QAAS,OACTC,cAAe,SACfC,eAAgB,aAChBC,WAAY,SACZC,UAAW,SACXC,WACE,oGAEJC,KAAM,CACJC,OAAQ,IACRR,MAAO,IACPS,OAAQ,mBAEVC,KAAM,CACJC,MAAO,QACPC,WAAY,gCAEdC,KAAM,CACJF,MAAO,QACPC,WAAY,+BACZE,SAAU,QAEZC,KAAM,CACJJ,MAAO,QACPC,WAAY,+BACZE,SAAU,OACVE,YAAa,WAEfC,OAAQ,CACNN,MAAO,SAETO,MAAO,CACLC,UAAW,OACXC,gBAAiB,gCAqGNC,MAjGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIPC,EAAU/B,IAEVqB,EAAS,WACbW,MAAM,GAAD,OAAIjC,GAAJ,OAAe4B,EAAf,uCAAmD5B,IACrDkC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLN,EAAWM,GACXR,EAAS,IACTS,QAAQC,IAAIF,MAEbG,OAAM,SAACC,GACNH,QAAQC,IAAIE,OA4BZC,EAxBO,CACX,qEACA,qEACA,6CACA,iCACA,6CACA,6CACA,+CAiBe,IAAIC,MAAOC,UACtBC,GAAO,IAAIF,MAAOG,UAClBC,EAjBS,CACb,uCACA,6CACA,iCACA,uCACA,qBACA,2BACA,2BACA,6CACA,mDACA,6CACA,uCACA,+CAKmB,IAAIJ,MAAOK,YAQ1B9B,EAAI,WAAM,IAAIyB,MAAOM,WAAjB,aANJ,IAAIN,MAAOO,aAAe,GACrB,KAAM,IAAIP,MAAOO,cAEjB,IAAIP,MAAOO,cAKtB,OACE,kBAAC,IAAD,CAAUC,UAAWnB,EAAQ5B,KAC3B,kBAACgD,EAAA,EAAD,CACED,UAAWnB,EAAQjB,MADrB,UAEK2B,EAFL,aAEaG,EAFb,YAEqBE,IACrB,kBAACK,EAAA,EAAD,CAAYD,UAAWnB,EAAQd,MAAOA,GACd,oBAAhBY,EAAQuB,KACd,6BACE,kBAACD,EAAA,EAAD,CAAYD,UAAWnB,EAAQjB,MAAOe,EAAQwB,MAC9C,kBAACF,EAAA,EAAD,CAAYD,UAAWnB,EAAQjB,MAC5Be,EAAQA,QAAQ,GAAGyB,YAAYC,OAAO,GAAGC,cACxC3B,EAAQA,QAAQ,GAAGyB,YAAYG,MAAM,IAEzC,kBAACC,EAAA,EAAD,CACEC,MAAK,2CAAsC9B,EAAQA,QAAQ,GAAGlB,KAAzD,WACLuC,UAAWnB,EAAQpB,OAErB,kBAACwC,EAAA,EAAD,CAAYD,UAAWnB,EAAQZ,MAC5ByC,KAAKC,MAAMhC,EAAQuB,KAAKjC,MAD3B,SAKF,8BAGF,kBAAC2C,EAAA,EAAD,CAAOZ,UAAWnB,EAAQT,MAAOyC,UAAW,EAAGC,QAAQ,YACrD,kBAACC,EAAA,EAAD,CACED,QAAQ,SACRE,WAAW,EACXhB,UAAWnB,EAAQV,OACnB8C,SAAU,SAAC3B,GAAD,OAAOZ,EAASY,EAAE4B,OAAOC,QACnCA,MAAO1C,EACP2C,WAAY,SAAC9B,GAAD,MAAiB,UAAVA,EAAE+B,KAAmBlD,OAE1C,kBAACmD,EAAA,EAAD,CAAYC,KAAK,SAASC,QAASrD,GACjC,kBAAC,IAAD,UCvIUsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAmD,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.b3fac656.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  TextField,\n  Typography,\n  CardMedia,\n  Paper,\n  IconButton,\n} from \"@material-ui/core/\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Div100vh from \"react-div-100vh\";\n\nconst api = {\n  key: \"3e24f8ec3ab92f67d68bd5902b5bd088\",\n  base: \"https://api.openweathermap.org/data/2.5/weather?q=\",\n};\n\nconst useStyles = makeStyles((theme) => ({\n  app: {\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    background:\n      \"radial-gradient(circle, rgba(27,131,255,1) 0%, rgba(23,134,255,1) 60%, rgba(115,184,255,1) 100%)\",\n  },\n  icon: {\n    height: 250,\n    width: 250,\n    margin: \"-25px 0 -50px 0\",\n  },\n  text: {\n    color: \"white\",\n    textShadow: \"2px 2px 4px rgba(0, 0, 0, 1)\",\n  },\n  time: {\n    color: \"white\",\n    textShadow: \"2px 2px 4px rgba(0, 0, 0, 1)\",\n    fontSize: \"3rem\",\n  },\n  temp: {\n    color: \"white\",\n    textShadow: \"2px 2px 4px rgba(0, 0, 0, 1)\",\n    fontSize: \"6rem\",\n    marginRight: \"-1.5rem\",\n  },\n  search: {\n    color: \"white\",\n  },\n  paper: {\n    marginTop: \"auto\",\n    backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n  },\n}));\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const classes = useStyles();\n\n  const search = () => {\n    fetch(`${api.base}${query}&units=metric&lang=ru&appid=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n        setQuery(\"\");\n        console.log(result);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const days = [\n    \"Воскресенье\",\n    \"Понедельник\",\n    \"Вторник\",\n    \"Среда\",\n    \"Четверг\",\n    \"Пятница\",\n    \"Суббота\",\n  ];\n  const months = [\n    \"Января\",\n    \"Февраля\",\n    \"Марта\",\n    \"Апреля\",\n    \"Мая\",\n    \"Июня\",\n    \"Июля\",\n    \"Августа\",\n    \"Сентября\",\n    \"Октября\",\n    \"Ноября\",\n    \"Декабря\",\n  ];\n\n  const day = days[new Date().getDay()];\n  const date = new Date().getDate();\n  const month = months[new Date().getMonth()];\n  const minutes = () => {\n    if (new Date().getMinutes() < 10) {\n      return \"0\" + new Date().getMinutes();\n    } else {\n      return new Date().getMinutes();\n    }\n  };\n  const time = `${new Date().getHours()}:${minutes()}`;\n\n  return (\n    <Div100vh className={classes.app}>\n      <Typography\n        className={classes.text}\n      >{`${day}, ${date} ${month}`}</Typography>\n      <Typography className={classes.time}>{time}</Typography>\n      {typeof weather.main != \"undefined\" ? (\n        <div>\n          <Typography className={classes.text}>{weather.name}</Typography>\n          <Typography className={classes.text}>\n            {weather.weather[0].description.charAt(0).toUpperCase() +\n              weather.weather[0].description.slice(1)}\n          </Typography>\n          <CardMedia\n            image={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@4x.png`}\n            className={classes.icon}\n          ></CardMedia>\n          <Typography className={classes.temp}>\n            {Math.round(weather.main.temp)}°\n          </Typography>\n        </div>\n      ) : (\n        <div></div>\n      )}\n\n      <Paper className={classes.paper} elevation={3} variant=\"outlined\">\n        <TextField\n          variant=\"filled\"\n          autoFocus={true}\n          className={classes.search}\n          onChange={(e) => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={(e) => e.key === \"Enter\" && search()}\n        />\n        <IconButton type=\"submit\" onClick={search}>\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n    </Div100vh>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}