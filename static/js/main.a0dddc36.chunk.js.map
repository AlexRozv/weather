{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","useStyles","makeStyles","theme","app","minHeight","width","display","flexDirection","justifyContent","alignItems","textAlign","background","icon","height","margin","text","color","textShadow","time","fontSize","temp","marginRight","search","paper","backgroundColor","App","useState","query","setQuery","weather","setWeather","window","innerHeight","setHeight","anime","setAnimated","addEventListener","divHeightStyle","classes","animate","setTimeout","fetch","then","res","json","result","console","log","catch","e","fromOutsideNumber","innerWidth","slide1","useSpring","config","mass","transform","slide2","dateSlide","main","searchSlide","cityTransition","opacity","day","Date","getDay","date","getDate","month","getMonth","getHours","getMinutes","className","style","div","Typography","name","description","charAt","toUpperCase","slice","CardMedia","image","Math","round","Paper","elevation","variant","TextField","autoFocus","onChange","target","value","onKeyPress","key","IconButton","type","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a0dddc36.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  TextField,\n  Typography,\n  CardMedia,\n  Paper,\n  IconButton,\n  Slide,\n} from \"@material-ui/core/\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useSpring, animated } from \"react-spring\";\n\nconst api = {\n  key: \"3e24f8ec3ab92f67d68bd5902b5bd088\",\n  base: \"https://api.openweathermap.org/data/2.5/weather?q=\",\n};\n\nconst useStyles = makeStyles((theme) => ({\n  app: {\n    minHeight: \"-webkit-fill-available\",\n    width: \"100vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    background:\n      \"radial-gradient(circle, rgba(27,131,255,1) 0%, rgba(23,134,255,1) 60%, rgba(115,184,255,1) 100%)\",\n  },\n  icon: {\n    height: 250,\n    width: 250,\n    margin: \"-25px 0 -50px 0\",\n  },\n  text: {\n    color: \"white\",\n    textShadow: \"2px 2px 4px rgba(0, 0, 0, 1)\",\n  },\n  time: {\n    color: \"white\",\n    textShadow: \"2px 2px 4px rgba(0, 0, 0, 1)\",\n    fontSize: \"3rem\",\n  },\n  temp: {\n    color: \"white\",\n    textShadow: \"2px 2px 4px rgba(0, 0, 0, 1)\",\n    fontSize: \"6rem\",\n    marginRight: \"-1.5rem\",\n  },\n  search: {\n    color: \"white\",\n  },\n  paper: {\n    backgroundColor: \"rgba(255, 255, 255, 0.5)\",\n  },\n}));\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [height, setHeight] = useState(window.innerHeight);\n  const [anime, setAnimated] = useState(false);\n\n  window.addEventListener(\"resize\", () => {\n    setHeight(window.innerHeight);\n  });\n\n  let divHeightStyle = {\n    height: height,\n  };\n\n  const classes = useStyles();\n\n  const search = () => {\n    fetch(`${api.base}${query}&units=metric&lang=ru&appid=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n        setQuery(\"\");\n        console.log(result);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n    setAnimated(true);\n  };\n\n  const animate = () => {\n    setAnimated(false);\n    setTimeout(() => {\n      search();\n    }, 500);\n  };\n\n  let fromOutsideNumber = -100 - window.innerWidth / 2;\n\n  const slide1 = useSpring({\n    config: { mass: 3 },\n    transform: anime\n      ? \"translate3d(0,0,0)\"\n      : `translate3d(${fromOutsideNumber}px,0,0)`,\n  });\n  const slide2 = useSpring({\n    config: { mass: 3 },\n    transform: anime\n      ? \"translate3d(0,0,0)\"\n      : `translate3d(${-fromOutsideNumber}px,0,0)`,\n  });\n  const dateSlide = useSpring({\n    transform:\n      typeof weather.main != \"undefined\"\n        ? \"translate3d(0,0,0)\"\n        : \"translate3d(0,50%,0)\",\n  });\n  const searchSlide = useSpring({\n    transform:\n      typeof weather.main != \"undefined\"\n        ? \"translate3d(0,0,0)\"\n        : \"translate3d(0,-25vh,0)\",\n  });\n  const cityTransition = useSpring({\n    opacity: anime ? 1 : 0,\n  });\n\n  const days = [\n    \"Воскресенье\",\n    \"Понедельник\",\n    \"Вторник\",\n    \"Среда\",\n    \"Четверг\",\n    \"Пятница\",\n    \"Суббота\",\n  ];\n  const months = [\n    \"Января\",\n    \"Февраля\",\n    \"Марта\",\n    \"Апреля\",\n    \"Мая\",\n    \"Июня\",\n    \"Июля\",\n    \"Августа\",\n    \"Сентября\",\n    \"Октября\",\n    \"Ноября\",\n    \"Декабря\",\n  ];\n\n  const day = days[new Date().getDay()];\n  const date = new Date().getDate();\n  const month = months[new Date().getMonth()];\n  const minutes = () => {\n    if (new Date().getMinutes() < 10) {\n      return \"0\" + new Date().getMinutes();\n    } else {\n      return new Date().getMinutes();\n    }\n  };\n  const time = `${new Date().getHours()}:${minutes()}`;\n\n  return (\n    <div className={classes.app} style={divHeightStyle}>\n      <animated.div style={dateSlide}>\n        <Typography\n          className={classes.text}\n        >{`${day}, ${date} ${month}`}</Typography>\n        <Typography className={classes.time}>{time}</Typography>\n      </animated.div>\n      {typeof weather.main != \"undefined\" ? (\n        <div>\n          <animated.div style={cityTransition}>\n            <Typography className={classes.text}>{weather.name}</Typography>\n\n            <Typography className={classes.text}>\n              {weather.weather[0].description.charAt(0).toUpperCase() +\n                weather.weather[0].description.slice(1)}\n            </Typography>\n          </animated.div>\n          <animated.div style={slide1}>\n            <CardMedia\n              image={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@4x.png`}\n              className={classes.icon}\n            ></CardMedia>\n          </animated.div>\n          <animated.div style={slide2}>\n            <Typography className={classes.temp}>\n              {Math.round(weather.main.temp)}°\n            </Typography>\n          </animated.div>\n        </div>\n      ) : (\n        <div></div>\n      )}\n\n      <animated.div style={searchSlide}>\n        <Paper className={classes.paper} elevation={3} variant=\"outlined\">\n          <TextField\n            variant=\"filled\"\n            autoFocus={true}\n            className={classes.search}\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={(e) => e.key === \"Enter\" && animate()}\n          />\n          <IconButton type=\"submit\" onClick={animate}>\n            <SearchIcon />\n          </IconButton>\n        </Paper>\n      </animated.div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}